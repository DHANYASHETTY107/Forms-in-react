Controlled form----------------------form handling without the prevent default(exceuting several times before the submiting)-------------------------

import { useState } from "react";

function FirstForm(){

    const[formData,setFormData]=useState({
        name:'',
        email:''
    });

    const handleChange =(event)=>{
        const {name,value}=event.target;

    
    setFormData((prevData)=>({
        ...prevData,
        [name]:value
    }));
    };

    const handleSubmit=((event)=>{
        alert(`Name:${formData.name} \n Email:${formData.email}`)
    })
    return(
        <div>
            <form  onSubmit={handleSubmit}>
                <input  name="name" type="text" placeholder="Enter a name" onChange={handleChange}/><br></br>
                <input  name="email" type="email" placeholder="Enter a Email" onChange={handleChange}/><br></br>
                <button type="subbit">Submit</button>

            </form>

        </div>
    )
}
export default FirstForm;
---------------------------------------with prevent defualt whih restores the old data-----------------------------event.preventDefault() stops the page from reloading.

import { useState } from "react";

function FirstForm(){

    const[formData,setFormData]=useState({
        name:'',
        email:''
    });

    const handleChange =(event)=>{
        const {name,value}=event.target;

    
    setFormData((prevData)=>({
        ...prevData,
        [name]:value
    }));
    };

    const handleSubmit=((event)=>{
      
        event.preventDefault();
          alert(`Name:${formData.name} \n Email:${formData.email}`);
    })
    console.log("First Component Rendered....")
    return(
        <div>
            <form  onSubmit={handleSubmit}>
                <input  name="name" type="text" placeholder="Enter a name" onChange={handleChange}/><br></br>
                <input  name="email" type="email" placeholder="Enter a Email" onChange={handleChange}/><br></br>
                <button type="subbit">Submit</button>

            </form>

        </div>
    )
}
export default FirstForm;

--------------------------Uncontrolled form-------------------------------
//UnControlled form
import { useRef } from "react";

function SecondForm(){

    const nameRef=useRef();

    const handleSubmit=(event)=>{
        event.preventDefault();
        alert(`Name:${nameRef.current.value}`);
    }
    return(
        <div>
            <form onSubmit={handleSubmit}>
                <input type="text" ref={nameRef} placeholder="enter a name"/><br></br>
                <button type="submit">Submit</button>
            </form>
        </div>

    )
}
export default SecondForm;
--------------------------------------------------------------------------------------------------------

Forms Validation

import { useState } from "react";

function ThirdForm(){

    const[formData,setFormData]=useState({
        name:'',
        email:'',
        password:'',
        conformPassword:''
    })
    const[errors,setErrors]=useState({})
    const handleChange=(event)=>{
        setFormData({
            ...formData,
            [event.target.name]:event.target.value

        });
    };
    const validate=()=>{
        let errorList={};
        
        if(!formData.name.trim())
        {
            errorList.name="Name is required.."
        }
        if(!formData.email.trim()){
            errorList.name="Email is required"
        }else if(!/(.+)@(.+){2,}\.(.+){2,}/.test(formData.email)){
            errorList.name="Emial is invalid..."
        }else if (!formData.email.endsWith("@gmail.com")) {
        errorList.email = "Email must end with @gmail.com";
        }
        if (!formData.password.trim()) {
            errorList.password = "Password is required";
        } else if (formData.password.length > 3) {
        errorList.password = "Password must not exceed 3 characters";
        }
        if(formData.password!==formData.conformPassword)
        {
        errorList.name="Password Is Not matching with the Old password"
        }

        return errorList;
    }
    const handleSubmit=(event)=>{
        event.preventDefault();
        const validateErrors=validate();
        setErrors(validateErrors);

        if(Object.keys(validateErrors).length===0)
        {
            alert(` Name:${formData.name}, Email:${formData.email}`)
        }
    }

  
    return(
        <div>
            <form onSubmit={handleSubmit}>
                <div>
                    <input name="name" type="text" placeholder="Enter a name" value={formData.data} onChange={handleChange} />
                    {errors.name && <p style={{color:'red'}}>{errors.name}</p>}
                </div><br></br>
                <div>
                    <input name="email" type="text" placeholder="Enter a email" value={formData.data} onChange={handleChange} />
                    {errors.email && <p style={{color:'red'}}>{errors.email}</p>}
                </div><br></br>
                <div>
                    <input name="password" type="password"  placeholder="Enter a password" value={formData.data} onChange={handleChange} />
                    {errors.password && <p style={{color:'red'}}>{errors.password}</p>}
                </div><br></br>
                <div>
                    <input name="conformPassword" type="password" placeholder="Enter a conformpassword" value={formData.data} onChange={handleChange} />
                    {errors.conformPassword && <p style={{color:'red'}}>{errors.conformPassword}</p>}
                </div><br></br>


                <button type="submit ">Submit</button>

            </form>

        </div>

    )
}
export default ThirdForm
---------------------------------------------------DAY 2----------------------FORM VALIDATION USING FRMIK AND YUP
import { useFormik } from 'formik'
import * as Yup from 'yup';

const Formvalid = () => {
    
    const validationSchema = Yup.object({
        name: Yup.string()
            .required("Name is required"),

        email: Yup.string()
            .email("Invalid email address")
            .required("Email is required"),

        password: Yup.string()
            .min(6, "Password must be at least 6")
            .required("Password is required")
    });

    const formik = useFormik({
        initialValues: {
            name: '',
            email: '',
            password: ''
        },
        validationSchema: validationSchema,
        onSubmit: (values) => {
           
            alert("Registration Successful\n" + JSON.stringify(values, null, 2));
        }
    });

    return (
        <div style={{ maxWidth: '500px', margin: 'auto', padding: '20px' }}>
            <h2>Register:</h2>
            <form onSubmit={formik.handleSubmit}>
                <div style={{ marginBottom: '10px' }}>
                    <label>Name:</label>
                    <input
                        type='text'
                        name='name'
                        value={formik.values.name}
                        placeholder='Enter a name'
                        onChange={formik.handleChange}
                        onBlur={formik.handleBlur}
                    />
                    {formik.touched.name && formik.errors.name &&(
                        <div style={{ color: 'red' }}>{formik.errors.name}</div>
                    )}
                </div>

                {/* //email  */}
                <div style={{ marginBottom: '10px' }}>
                    <label>Email:</label>
                    <input
                        type='email'
                        name='email'
                        value={formik.values.email}
                        placeholder='Enter a Email'
                        onChange={formik.handleChange}
                        onBlur={formik.handleBlur}
                    />
                    {formik.touched.email && formik.errors.email &&(
                        <div style={{ color: 'red' }}>{formik.errors.email}</div>
                    )}
                </div>

                {/* password  */}
                <div style={{ marginBottom: '10px' }}>
                    <label>Password:</label>
                    <input
                        type='password'
                        name='password'
                        value={formik.values.password}
                        placeholder='Enter a password'
                        onChange={formik.handleChange}
                        onBlur={formik.handleBlur}
                    />
                    {formik.touched.password&& formik.errors.password &&(
                        <div style={{ color: 'red' }}>{formik.errors.password}</div>
                    )}
                </div>
                <br></br>
                <button type='submit'>Submit</button>


                
            </form>
        </div>
    );
};
export default Formvalid;

